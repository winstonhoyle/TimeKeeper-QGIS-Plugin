# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TimeKeeper
                                 A QGIS plugin
 This plugin keeps time for an annotation
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-09-21
        git sha              : $Format:%H$
        copyright            : (C) 2022 by iMerit
        email                : winston.h@imerit.net
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject, QgsMessageLog

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .time_keeper_dialog import TimeKeeperDialog
import os.path

import json
import os
import requests


class TimeKeeper:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(self.plugin_dir, 'i18n', 'TimeKeeper_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr('&Time Keeper')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('TimeKeeper', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/time_keeper/icon.png'
        self.add_action(
            icon_path,
            text=self.tr('TimeKeeping'),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr('&Time Keeper'), action)
            self.iface.removeToolBarIcon(action)

    def clear_dialog(self):
        self.dlg.localFile.lineEdit().clearValue()
        self.dlg.nameEdit.clear()
        self.dlg.idEdit.clear()
        # TODO Clean status box
        # self.dlg.statusBox.clearEditText()

    def send_task_to_service(self, name: str, job_id: int, status: str, file_name: str):
        # Variables used
        url = 'http://localhost:8000/task'
        data = {'name': name, 'job_id': job_id, 'status': status, 'file_name': file_name}
        headers = {'Content-type': 'application/json'}

        # Check if task exists
        task_url = f'{url}/{job_id}'
        r = requests.get(task_url)
        if r.status_code == 200:
            # If it exists, patch the record
            r = requests.patch(task_url, data=json.dumps(data), headers=headers)
            QgsMessageLog.logMessage('Recorded Updated', 'TimeKeeper')
        else:
            # Creating a data entry
            r = requests.post(url, data=json.dumps(data), headers=headers)
            QgsMessageLog.logMessage('Recorded Created', 'TimeKeeper')

        # Status code handling
        if r.status_code not in [200, 201]:
            QgsMessageLog.logMessage(
                f'Error: {r.status_code}, {r.reason}, {name}, {job_id}, {status}', 'TimeKeeper'
            )

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = TimeKeeperDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            file_path = self.dlg.localFile.filePath()
            file_name = os.path.basename(file_path)
            status = self.dlg.statusBox.currentText()
            name = self.dlg.nameEdit.text()
            job_id = int(self.dlg.idEdit.text())
            # Send a task to service for monitoring, probably will be swapped out with internal API
            self.send_task_to_service(name, job_id, status, file_name=file_name)
            # Removing layer from map and clean the dialog
            if status == 'Completed' and file_name:
                self.clear_dialog()
                instance = QgsProject.instance()
                layer_name = file_name.split('.')[0]
                map_layer = instance.mapLayersByName(layer_name)[0]
                instance.removeMapLayer(layer=map_layer)
                QgsMessageLog.logMessage(f'Recorded Completed', 'TimeKeeper')
            # Add raster layer
            if status == 'Working' and file_name:
                self.iface.addRasterLayer(file_path, file_name.split('.')[0])
